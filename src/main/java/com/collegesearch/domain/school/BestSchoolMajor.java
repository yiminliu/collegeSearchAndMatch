package com.collegesearch.domain.school;

// Generated Aug 10, 2015 3:17:49 PM by Hibernate Tools 4.0.0

import java.util.Comparator;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;



/**
 * BestSchoolMajor generated by hbm2java
 */
@Entity
//This is a join table
@Table(name = "best_school_major", catalog = "School")
public class BestSchoolMajor implements java.io.Serializable {

	private static final long serialVersionUID = -9584290758320L;
	private SchoolMajorId id;
	private Integer rank;
	private School school;
	private Major major;
		
	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "schoolId", column = @Column(name = "School_Id", nullable = false)),
			@AttributeOverride(name = "majorId", column = @Column(name = "Major_Id", nullable = false)) })
	public SchoolMajorId getId() {
		return this.id;
	}

	public void setId(SchoolMajorId id) {
		this.id = id;
	}

	@Column(name = "Rank", nullable = false)
	public Integer getRank() {
		return this.rank;
	}

	public void setRank(Integer rank) {
		this.rank = rank;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name="school_id", updatable=false, insertable=false)
	//@ContainedIn
	public School getSchool(){
		return this.school;
	}
	
	public void setSchool(School school){
		this.school = school;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name="major_id", updatable=false, insertable=false)
	public Major getMajor(){
		return this.major;
	}
	
	public void setMajor(Major major){
		this.major = major;
	}
	
	public BestSchoolMajor() {
	}

	public BestSchoolMajor(SchoolMajorId id, int rank) {
		this.id = id;
		this.rank = rank;
	}
	
	public BestSchoolMajor(School school, Major major, int rank) {
		this.school = school;
		this.major = major;
		this.rank = rank;
		this.id.setSchoolId(school.getId());
		this.id.setMajorId(major.getId());
	}
	
	@Override
	public String toString() {
		return "BestSchoolMajor [id=" + id + ", rank=" + rank + "]";
	}
	
	public static class MajorRankComparator implements Comparator<BestSchoolMajor>{
	   public int compare(BestSchoolMajor sm1, BestSchoolMajor sm2){
			  int result = 1;
			  //result = sm1.getCategory().compareTo(school2.getCategory());
			  //if(result > 1)
				// return 1;
			  if(sm1 == null)
				 return 1;
			  if(sm2 == null)
				 return -1; 
			  if(sm1.getRank() == null && sm2.getRank() == null)
				 return sm1.getSchool().getName().compareTo(sm2.getSchool().getName());
			  if(sm1.getRank() == null)
				 return 1;
			  if(sm2.getRank() == null)
				 return -1;	
			  if(sm1.getRank() > 0){
			     try{
			        if(sm1.getRank() < sm2.getRank())
			           return -1;
			        else if(sm1.getRank() > sm2.getRank())
			           return 1;
			        else if(sm1.getRank() == sm2.getRank())
			      	   return sm1.getSchool().getName().compareTo(sm2.getSchool().getName());
			    }
			    catch(Exception e){
			 	   e.printStackTrace();
			    }	
		      } 
			  return result;
	    }
	}
	
}
